services:
  db:
    image: postgres:14-alpine
    container_name: fileserver_db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:2-alpine
    container_name: fileserver_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - ./certs/localhost+3.pem:/certs/cert.pem:ro
      - ./certs/localhost+3-key.pem:/certs/key.pem:ro
    depends_on:
      - app
  
  app:
    container_name: fileserver_app
    build: 
      context: .
    restart: always
    environment:
      - DB_SOURCE=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable
      - JWT_SECRET=${JWT_SECRET}
      - FILE_STORAGE_PATH=/storage
    volumes:
      - file_storage:/storage
      - ./configs:/configs:ro
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres_data:
  file_storage:
  caddy_data: